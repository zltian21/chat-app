{"version":3,"sources":["Components/Layout.tsx","@types/enums.ts","store/roomReducer.ts","utils/websocket.ts","store/userReducer.ts","store/index.ts","utils/request.ts","store/actions/user.ts","Pages/Login/index.tsx","Pages/Main/NotificationList.tsx","utils/random.ts","Pages/Main/Sidebar.tsx","Components/Message.tsx","store/actions/room.ts","Pages/Main/ChatPanel.tsx","Components/Loading.tsx","Pages/Main/RoomsList.tsx","Pages/Main/RoomDrawer.tsx","Pages/Main/index.tsx","Pages/Register/index.tsx","App.tsx","index.tsx"],"names":["Layout","props","className","children","NotificationStatusEnum","UserActionType","RoomActionType","initialState","currentRoom","messages","messageLoading","normalUsers","blockedUsers","fetchUsersLoading","isAdmin","isBlocked","isPrivate","isPrivateMessage","privateMessageTo","generateWebsocket","username","prefix","location","protocol","includes","ws","WebSocket","hostname","port","onopen","console","log","onmessage","data","obj","JSON","parse","store","getState","room","chatRoomId","type","dispatch","EDIT_MESSAGE","payload","REMOVE_MESSAGE","NEW_MESSAGE","HAVE_NEW_MESSAGE","onclose","RECONNECT_WEBSOCKET","onerror","err","notification","error","message","token","localStorage","getItem","isAuthenticated","user","notifications","roomList","roomListLoading","sidebarTab","isLoading","closedWarningPanel","rootReducer","combineReducers","state","USER_LOGIN","USER_REGISTER","setItem","id","close","USER_LOADING","USER_LOGOUT","removeItem","USER_UPDATE","USER_ERROR","FETCH_NOTIFICATION","UPDATE_NOTIFICATION","index","findIndex","each","status","FETCH_CHATROOM_LIST","map","hasNewMessage","LOADING_CHATROOM","SET_SIDEBAR_TAB","LEAVE_ALL_ROOMS","CLOSE_WARNING_PANEL","OPEN_WARNING_PANEL","roomListCopy1","find","CLEAR_NEW_MESSAGE","roomListCopy2","ACTIVE_ROOM","SET_PRIVATE_MESSAGE","UNSET_PRIVATE_MESSAGE","FETCH_ROOM","FETCH_ROOM_LOADING","CANCEL_LOADING","FETCH_NORMAL_USERS","FETCH_BLOCKED_USERS","FETCH_USERS_LOADING","FETCH_USERS_END_LOADING","messagesCopy1","messageId","content","messagesCopy2","splice","LEAVE_ROOM","createStore","applyMiddleware","thunk","service","axios","create","baseURL","interceptors","request","use","config","headers","response","res","errCode","errMsg","Error","params","a","method","url","qs","stringify","body","header","userLogin","password","userRegister","userInfo","fetchUserInfo","hateSpeechCount","updateInvitation","accept","ACCEPTED","DECLINED","fetchRoomList","tab","Login","useForm","form","useDispatch","useSelector","useEffect","history","push","handleSubmit","validateFields","fields","getFieldsValue","requiredMark","onSubmitCapture","Item","name","rules","required","placeholder","size","style","marginTop","shape","htmlType","minWidth","height","loading","onClick","NotificationList","handleInvitationOp","accepted","renderOperations","NO_STATUS","danger","icon","CloseOutlined","CheckOutlined","processContent","indexOf","match","substring","dataSource","renderItem","MailTwoTone","color","BellTwoTone","COLOR_LISTS","COLOR_LISTS_LENGTH","length","randomColor","Math","floor","random","Sidebar","useState","showNotifications","setShowNotifications","timer","intervalBody","setInterval","clearInterval","Modal","confirm","title","ExclamationCircleOutlined","centered","StopOutlined","closable","cancelText","onOk","onCancel","handleSwitchTab","trigger","placement","arrowContent","age","schoolName","interests","src","imageUrl","backgroundColor","onVisibleChange","count","filter","transform","Message","own","onMessageChange","onMessageDelete","isEditing","setIsEditing","editText","setEditText","handleEditOnKeyPress","e","which","shiftKey","preventDefault","renderPopoverContent","value","onChange","target","onKeyPress","showIcon","marginBottom","receiver","userName","EyeInvisibleOutlined","margin","sender","visible","userAvatar","userId","fetchRoomUsers","data1","data2","ChatPanel","messagePanelRef","useRef","inputMessage","setInputMessage","scroll","setScroll","current","scrollIntoView","behavior","setTimeout","handleMessageChange","text","handleMessageDelete","chatRoomName","EllipsisOutlined","fontSize","marginLeft","openDrawer","onScroll","position","left","top","float","clear","ref","CloseCircleFilled","TextArea","disabled","_","processed","senderId","receiverId","roomId","send","showCount","maxLength","rows","alt","Loading","width","zIndex","RoomsList","createModalVisible","setCreateModalVisible","createLoading","setCreateLoading","handleSubmitForm","handleClickRoom","PlusOutlined","Room","isActive","okText","okType","destroyOnClose","footer","labelAlign","labelCol","span","wrapperCol","label","initialValue","validator","Promise","reject","resolve","min","max","valuePropName","dot","split","join","slice","RoomDrawer","otherUsers","setOtherUsers","memberModalVisible","setMemberModalVisible","inviteListLoading","setInviteListLoading","blockOrUnblockUser","toBlock","success","removeUser","renderMenu","onClose","handleOpenInviteModal","getContainer","overlay","MoreOutlined","textAlign","ExclamationCircleFilled","onConfirm","Main","drawerVisible","setDrawerVisible","to","duration","AVATARS","Register","form1","setForm1","step","setStep","selectedAvatar","setSelectedAvatar","avatarSelectVisible","setAvatarSelectVisible","handleMoveStep","incre","result","formValues","Object","assign","steps","getFieldValue","ArrowRightOutlined","marginRight","setFieldsValue","display","UserOutlined","SmileOutlined","AppstoreOutlined","ArrowLeftOutlined","direction","Step","App","hashType","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec89a2f1.chunk.js","sourcesContent":["import React, { ReactChild } from 'react';\n\nimport './styles.scss';\n\nexport default function Layout(props: { children: ReactChild }): JSX.Element {\n  return (\n    <div className=\"layout\">\n      <div className=\"child-container\">\n        <div className=\"heading\">\n          <div className=\"apple-ops\">\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n          <span className=\"title\">Chat App by team-Rice</span>\n        </div>\n        {props.children}\n      </div>\n    </div>\n  );\n}\n","export enum NotificationStatusEnum {\n  ACCEPTED,\n  DECLINED,\n  NO_STATUS\n}\n\nexport enum UserActionType {\n  USER_LOGIN = 'USER_LOGIN',\n  USER_REGISTER = 'USER_REGISTER',\n  USER_LOGOUT = 'USER_LOGOUT',\n  USER_UPDATE = 'USER_UPDATE',\n  USER_ERROR = 'USER_ERROR',\n  USER_LOADING = 'USER_LOADING',\n  FETCH_NOTIFICATION = 'FETCH_NOTIFICATION',\n  UPDATE_NOTIFICATION = 'UPDATE_NOTIFICATION',\n  FETCH_CHATROOM_LIST = 'FETCH_CHATROOM_LIST',\n  LOADING_CHATROOM = 'LOADING_CHATROOM',\n  SET_SIDEBAR_TAB = 'SET_SIDEBAR_TAB',\n  LEAVE_ALL_ROOMS = 'LEAVE_ALL_ROOMS',\n  HAVE_NEW_MESSAGE = 'HAVE_NEW_MESSAGE',\n  CLEAR_NEW_MESSAGE = 'CLEAR_NEW_MESSAGE',\n  OPEN_WARNING_PANEL = 'OPEN_WARNING_PANEL',\n  CLOSE_WARNING_PANEL = 'CLOSE_WARNING_PANEL',\n  RECONNECT_WEBSOCKET = 'RECONNECT_WEBSOCKET'\n}\n\nexport enum RoomActionType {\n  ACTIVE_ROOM = 'ACTIVE_ROOM',\n  FETCH_ROOM = 'FETCH_ROOM',\n  FETCH_ROOM_LOADING = 'FETCH_ROOM_LOADING',\n  CANCEL_LOADING = 'CANCEL_LOADING',\n  FETCH_NORMAL_USERS = 'FETCH_NORMAL_USERS',\n  FETCH_BLOCKED_USERS = 'FETCH_BLOCKED_USERS',\n  FETCH_USERS_LOADING = 'FETCH_USERS_LOADING',\n  FETCH_USERS_END_LOADING = 'FETCH_USERS_END_LOADING',\n  SET_PRIVATE_MESSAGE = 'SET_PRIVATE_MESSAGE',\n  UNSET_PRIVATE_MESSAGE = 'UNSET_PRIVATE_MESSAGE',\n  NEW_MESSAGE = 'NEW_MESSAGE',\n  EDIT_MESSAGE = 'EDIT_MESSAGE',\n  REMOVE_MESSAGE = 'REMOVE_MESSAGE',\n  LEAVE_ROOM = 'LEAVE_ROOM'\n}\n","import { RoomActionType } from '../@types/enums';\n\nconst initialState: RoomState = {\n  currentRoom: null,\n  messages: [],\n  messageLoading: false,\n  normalUsers: [],\n  blockedUsers: [],\n  fetchUsersLoading: false,\n  isAdmin: false,\n  isBlocked: false,\n  isPrivate: false,\n  isPrivateMessage: false,\n  privateMessageTo: null\n};\n\nexport default (state: RoomState = initialState, { type, payload }: RoomAction): RoomState => {\n  switch (type) {\n    case RoomActionType.ACTIVE_ROOM:\n      return {\n        ...state,\n        currentRoom: payload\n      };\n    case RoomActionType.SET_PRIVATE_MESSAGE:\n      return {\n        ...state,\n        isPrivateMessage: true,\n        privateMessageTo: payload\n      };\n    case RoomActionType.UNSET_PRIVATE_MESSAGE:\n      return {\n        ...state,\n        isPrivateMessage: false,\n        privateMessageTo: null\n      };\n    case RoomActionType.FETCH_ROOM:\n      return {\n        ...state,\n        messages: payload.messages,\n        isAdmin: payload.isAdmin,\n        isBlocked: payload.isBlocked,\n        isPrivate: payload.isPrivate,\n        messageLoading: false\n      };\n    case RoomActionType.FETCH_ROOM_LOADING:\n      return {\n        ...state,\n        messageLoading: true\n      };\n    case RoomActionType.CANCEL_LOADING:\n      return {\n        ...state,\n        messageLoading: false\n      };\n    case RoomActionType.FETCH_NORMAL_USERS:\n      return {\n        ...state,\n        normalUsers: payload\n      };\n    case RoomActionType.FETCH_BLOCKED_USERS:\n      return {\n        ...state,\n        blockedUsers: payload\n      };\n    case RoomActionType.FETCH_USERS_LOADING:\n      return {\n        ...state,\n        fetchUsersLoading: true\n      };\n    case RoomActionType.FETCH_USERS_END_LOADING:\n      return {\n        ...state,\n        fetchUsersLoading: false\n      };\n    case RoomActionType.NEW_MESSAGE:\n      return {\n        ...state,\n        messages: [...state.messages, payload]\n      };\n    case RoomActionType.EDIT_MESSAGE:\n      const messagesCopy1: MessageType[] = [...state.messages];\n      messagesCopy1.find((each) => each.messageId === payload.messageId)!.content = payload.content;\n      return {\n        ...state,\n        messages: messagesCopy1\n      };\n    case RoomActionType.REMOVE_MESSAGE:\n      const messagesCopy2: MessageType[] = [...state.messages];\n      messagesCopy2.splice(\n        state.messages.findIndex((each) => each.messageId === payload.messageId),\n        1\n      );\n      return {\n        ...state,\n        messages: messagesCopy2\n      };\n    case RoomActionType.LEAVE_ROOM:\n      return {\n        ...state,\n        currentRoom: null,\n        messages: [],\n        messageLoading: false,\n        normalUsers: [],\n        blockedUsers: [],\n        isAdmin: false,\n        isPrivateMessage: false,\n        isBlocked: false,\n        isPrivate: false,\n        privateMessageTo: null\n      };\n    default:\n      return state;\n  }\n};\n","import { notification } from 'antd';\nimport { RoomActionType, UserActionType } from '../@types/enums';\nimport store from '../store';\n\nexport const generateWebsocket = (username: string) => {\n  const prefix = location.protocol.includes('https') ? 'wss' : 'ws';\n\n  const ws = new WebSocket(\n    `${prefix}://${location.hostname}:${location.port}/chatapp?username=${username}`\n  );\n\n  ws.onopen = () => {\n    console.log('Websocket Established');\n  };\n\n  ws.onmessage = ({ data }: MessageEvent<string>) => {\n    const obj: MessageType = JSON.parse(data);\n\n    if (store.getState().room.currentRoom?.chatRoomId !== obj.chatRoomId) {\n      store.dispatch({ type: UserActionType.HAVE_NEW_MESSAGE, payload: obj.chatRoomId });\n      return;\n    }\n    if (obj.type === 'edit') {\n      store.dispatch({ type: RoomActionType.EDIT_MESSAGE, payload: obj });\n    } else if (obj.type === 'remove') {\n      store.dispatch({ type: RoomActionType.REMOVE_MESSAGE, payload: obj });\n    } else {\n      store.dispatch({ type: RoomActionType.NEW_MESSAGE, payload: obj });\n    }\n  };\n\n  ws.onclose = () => {\n    console.log('Websocket Closed');\n    store.dispatch({ type: UserActionType.RECONNECT_WEBSOCKET });\n  };\n\n  ws.onerror = (err) => {\n    notification.error({\n      message: 'Websocket Error'\n    });\n    console.log(err);\n  };\n\n  return ws;\n};\n","import { UserActionType } from '../@types/enums';\nimport { generateWebsocket } from '../utils/websocket';\n\nconst initialState: UserState = {\n  token: localStorage.getItem('token'),\n  isAuthenticated: !!localStorage.getItem('token'),\n  user: null,\n  notifications: [],\n  roomList: [],\n  roomListLoading: false,\n  sidebarTab: 'my',\n  isLoading: false,\n  ws: null,\n  closedWarningPanel: false\n};\n\nexport default (state = initialState, { type, payload }: UserAction): UserState => {\n  switch (type) {\n    case UserActionType.USER_LOGIN:\n    case UserActionType.USER_REGISTER:\n      localStorage.setItem('token', `${payload.id}`);\n      state.ws?.close();\n      return {\n        ...state,\n        token: `${payload!.id}`,\n        isAuthenticated: true,\n        user: payload,\n        sidebarTab: 'my',\n        isLoading: false,\n        ws: generateWebsocket(payload.username)\n      };\n    case UserActionType.USER_LOADING:\n      return {\n        ...state,\n        isLoading: true\n      };\n    case UserActionType.USER_LOGOUT:\n      localStorage.removeItem('token');\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        notifications: [],\n        roomList: [],\n        ws: null\n      };\n    case UserActionType.USER_UPDATE:\n      return {\n        ...state,\n        user: payload,\n        ws: state.ws ? state.ws : generateWebsocket(payload.username)\n      };\n    case UserActionType.USER_ERROR:\n      return {\n        ...state,\n        isLoading: false\n      };\n    case UserActionType.FETCH_NOTIFICATION:\n      return {\n        ...state,\n        notifications: payload\n      };\n    case UserActionType.UPDATE_NOTIFICATION:\n      const index = state.notifications.findIndex((each) => each.id === payload.id);\n      const notifications = [...state.notifications];\n      notifications[index].status = payload.status;\n      return {\n        ...state,\n        notifications\n      };\n    case UserActionType.FETCH_CHATROOM_LIST:\n      return {\n        ...state,\n        roomList: payload.map((each: RoomListItemType) => ({ ...each, hasNewMessage: false })),\n        roomListLoading: false\n      };\n    case UserActionType.LOADING_CHATROOM:\n      return {\n        ...state,\n        roomListLoading: true\n      };\n    case UserActionType.SET_SIDEBAR_TAB:\n      return {\n        ...state,\n        sidebarTab: payload\n      };\n    case UserActionType.LEAVE_ALL_ROOMS:\n      return {\n        ...state,\n        roomList: []\n      };\n    case UserActionType.CLOSE_WARNING_PANEL:\n      return {\n        ...state,\n        closedWarningPanel: true\n      };\n    case UserActionType.OPEN_WARNING_PANEL:\n      return {\n        ...state,\n        closedWarningPanel: false\n      };\n    case UserActionType.HAVE_NEW_MESSAGE:\n      const roomListCopy1 = [...state.roomList];\n      roomListCopy1.find((each) => each.chatRoomId === payload.chatRoomId)!.hasNewMessage = true;\n      return {\n        ...state,\n        roomList: roomListCopy1\n      };\n    case UserActionType.CLEAR_NEW_MESSAGE:\n      const roomListCopy2 = [...state.roomList];\n      roomListCopy2.find((each) => each.chatRoomId === payload)!.hasNewMessage = false;\n      return {\n        ...state,\n        roomList: roomListCopy2\n      };\n    case UserActionType.RECONNECT_WEBSOCKET:\n      return {\n        ...state,\n        ws: state.user ? generateWebsocket(state.user.username) : null\n      };\n    default: {\n      return state;\n    }\n  }\n};\n","import { applyMiddleware, createStore, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport roomReducer from './roomReducer';\nimport userReducer from './userReducer';\n\nconst rootReducer = combineReducers({ user: userReducer, room: roomReducer });\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport default store;\n","import { notification } from 'antd';\nimport axios from 'axios';\nimport qs, { ParsedUrlQueryInput } from 'querystring';\nimport { RoomActionType, UserActionType } from '../@types/enums';\nimport store from '../store';\n\ninterface RequestParams<T> {\n  method: 'GET' | 'POST' | 'DELETE';\n  url: string;\n  body?: T;\n  header?: any;\n}\n\ninterface TResponse<T> {\n  errCode: number;\n  data?: T;\n  errMsg?: string;\n}\n\n// export const BASE_URL = `${location.protocol}//${location.hostname}`;\nexport const BASE_URL = 'https://chatapp-final-team-rice.herokuapp.com';\n\nconst service = axios.create({\n  // baseURL: 'https://www.fastmock.site/mock/3cd19c6749c291f038e517cb20d82db8/api'\n  baseURL: BASE_URL\n});\n\nservice.interceptors.request.use((config) => {\n  if (config.headers) {\n    (config.headers['Content-Type'] = 'application/x-www-form-urlencoded'),\n      (config.headers['Access-Control-Allow-Origin'] = '*');\n    if (localStorage.getItem('token')) {\n      config.headers['userId'] = localStorage.getItem('token')!;\n    }\n  }\n  return config;\n});\n\nservice.interceptors.response.use(\n  (res: any) => {\n    if (res.data.errCode !== 0) {\n      notification.error({\n        message: res.data.errMsg\n      });\n      throw new Error(`${res.data.errMsg}`);\n    }\n\n    return res;\n  },\n  (error) => {\n    const { response } = error;\n\n    if (!response) {\n      notification.error({\n        message: error.message\n      });\n\n      throw new Error(`${error.message}`);\n    }\n\n    if (response.status === 500) {\n      notification.error({\n        message: 'Server Error'\n      });\n    } else if (response.status === 401) {\n      notification.error({\n        message: response.data\n      });\n      store.dispatch({ type: UserActionType.USER_LOGOUT });\n      store.dispatch({ type: RoomActionType.LEAVE_ROOM });\n    } else {\n      notification.error({\n        message: response.data\n      });\n    }\n\n    throw new Error(`${response.data}`);\n  }\n);\n\nconst request = async <ResponseType = any, RequestType = any>(\n  params: RequestParams<RequestType>\n): Promise<TResponse<ResponseType>> => {\n  const response = await service.request<TResponse<ResponseType>>({\n    method: params.method,\n    url: params.url,\n    data: params.method === 'GET' ? null : qs.stringify((params.body || {}) as ParsedUrlQueryInput),\n    headers: params.header\n  });\n\n  return response.data;\n};\n\nexport default request;\n","import { RootState } from '..';\nimport { NotificationStatusEnum, UserActionType } from '../../@types/enums';\nimport request from '../../utils/request';\n\nexport const userLogin =\n  (username: string, password: string) => async (dispatch: DispatchType<UserAction>) => {\n    try {\n      dispatch({ type: UserActionType.USER_LOADING });\n      const { data } = await request<UserType[], UserLoginRequest>({\n        method: 'POST',\n        url: '/login',\n        body: { username, password }\n      });\n      dispatch({ type: UserActionType.USER_LOGIN, payload: data![0] });\n    } catch (error) {\n      console.log((error as Error).message);\n      dispatch({ type: UserActionType.USER_ERROR });\n    }\n  };\n\nexport const userRegister =\n  (userInfo: UserRegisterRequest) => async (dispatch: DispatchType<UserAction>) => {\n    try {\n      dispatch({ type: UserActionType.USER_LOADING });\n      const { data } = await request<UserType[], UserRegisterRequest>({\n        method: 'POST',\n        url: '/register',\n        body: { ...userInfo }\n      });\n      dispatch({ type: UserActionType.USER_REGISTER, payload: data![0] });\n    } catch (error) {\n      console.log((error as Error).message);\n      dispatch({ type: UserActionType.USER_ERROR, payload: (error as Error).message });\n    }\n  };\n\nexport const userLogout = () => async (dispatch: DispatchType<UserAction>) => {\n  try {\n    await request<string>({\n      method: 'GET',\n      url: '/logout'\n    });\n    dispatch({ type: UserActionType.USER_LOGOUT });\n  } catch (error) {\n    console.log((error as Error).message);\n  }\n};\n\nexport const fetchUserInfo =\n  (id?: string) => async (dispatch: DispatchType<UserAction>, getState: () => RootState) => {\n    try {\n      const { data } = await request<UserType[]>({\n        method: 'GET',\n        url: `/getUserInfo/${id || getState().user.token}`\n      });\n      dispatch({ type: UserActionType.USER_UPDATE, payload: data![0] });\n      if (\n        getState().user.user &&\n        data![0].hateSpeechCount > getState().user.user!.hateSpeechCount\n      ) {\n        dispatch({ type: UserActionType.OPEN_WARNING_PANEL });\n      }\n    } catch (error) {\n      console.log((error as Error).message);\n    }\n  };\n\nexport const fetchNotifications = () => async (dispatch: DispatchType<UserAction>) => {\n  try {\n    const { data } = await request<NotificationType[]>({\n      method: 'GET',\n      url: '/getUserNotification'\n    });\n    dispatch({ type: UserActionType.FETCH_NOTIFICATION, payload: data });\n  } catch (error) {\n    console.log((error as Error).message);\n  }\n};\n\nexport const updateInvitation =\n  (id: number, accept: boolean) => (dispatch: DispatchType<UserAction>) => {\n    dispatch({\n      type: UserActionType.UPDATE_NOTIFICATION,\n      payload: {\n        id,\n        status: accept ? NotificationStatusEnum.ACCEPTED : NotificationStatusEnum.DECLINED\n      }\n    });\n  };\n\nexport const fetchRoomList =\n  (tab: 'my' | 'public') => async (dispatch: DispatchType<UserAction>) => {\n    try {\n      const url = tab === 'my' ? '/getMyChatrooms' : '/getPublicChatrooms';\n      dispatch({ type: UserActionType.LOADING_CHATROOM });\n      const { data } = await request<RoomListItemType[]>({\n        method: 'GET',\n        url\n      });\n      dispatch({ type: UserActionType.FETCH_CHATROOM_LIST, payload: data });\n      dispatch({ type: UserActionType.SET_SIDEBAR_TAB, payload: tab });\n    } catch (error) {\n      console.log((error as Error).message);\n    }\n  };\n","import React, { useEffect } from 'react';\nimport { FaUserAlt, FaLock } from 'react-icons/fa';\nimport { RouteChildrenProps } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Input, Form, Button } from 'antd';\nimport { useForm } from 'antd/lib/form/Form';\n\nimport Layout from '../../Components/Layout';\nimport { RootState } from '../../store';\nimport { userLogin } from '../../store/actions/user';\nimport './styles.scss';\n\nexport default function Login(props: RouteChildrenProps): JSX.Element {\n  const [form] = useForm();\n  const dispatch = useDispatch();\n  const { isAuthenticated, isLoading } = useSelector((state: RootState) => state.user);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      props.history.push('/main');\n    }\n  }, [isAuthenticated]);\n\n  const handleSubmit = async () => {\n    try {\n      const result = await form.validateFields();\n      if (result) {\n        const fields = form.getFieldsValue();\n        dispatch(userLogin(fields.username, fields.password));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Layout>\n      <div className=\"login\">\n        <div className=\"left\"></div>\n        <div className=\"right\">\n          <h1>LOGIN</h1>\n          <Form form={form} requiredMark={false} className=\"form\" onSubmitCapture={handleSubmit}>\n            <Form.Item\n              name=\"username\"\n              rules={[{ required: true, message: 'This field cannot be empty' }]}\n            >\n              <Input placeholder=\"Username\" size=\"large\" prefix={<FaUserAlt />} />\n            </Form.Item>\n\n            <Form.Item\n              name=\"password\"\n              rules={[{ required: true, message: 'This field cannot be empty' }]}\n            >\n              <Input type=\"password\" placeholder=\"Password\" size=\"large\" prefix={<FaLock />} />\n            </Form.Item>\n\n            <div style={{ marginTop: '3rem' }}>\n              <Button\n                type=\"primary\"\n                shape=\"round\"\n                htmlType=\"submit\"\n                size=\"large\"\n                style={{ minWidth: '8rem', height: '3rem' }}\n                loading={isLoading}\n              >\n                Login\n              </Button>\n              <Button type=\"link\" size=\"large\" onClick={() => props.history.push('/register')}>\n                Register\n              </Button>\n            </div>\n          </Form>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, List } from 'antd';\nimport { BellTwoTone, CheckOutlined, CloseOutlined, MailTwoTone } from '@ant-design/icons';\n\nimport { RootState } from '../../store';\nimport { NotificationStatusEnum } from '../../@types/enums';\n\nimport './styles.scss';\nimport request from '../../utils/request';\nimport { fetchRoomList, updateInvitation } from '../../store/actions/user';\n\nexport default function NotificationList(): JSX.Element {\n  const dispatch = useDispatch();\n  const data = useSelector((state: RootState) => state.user.notifications);\n  const tab = useSelector((state: RootState) => state.user.sidebarTab);\n\n  const handleInvitationOp = async (id: number, accepted: boolean) => {\n    try {\n      await request<string, { accept: boolean }>({\n        method: 'POST',\n        url: `/opInvitation/${id}`,\n        body: { accept: accepted }\n      });\n      dispatch(updateInvitation(id, accepted));\n      if (accepted && tab === 'my') {\n        dispatch(fetchRoomList('my'));\n      }\n    } catch (error) {\n      console.log((error as Error).message);\n    }\n  };\n\n  const renderOperations = ({ id, type, status }: NotificationType) => {\n    if (type === 'invite')\n      return (\n        <div className=\"operation\">\n          {status === NotificationStatusEnum.NO_STATUS ? (\n            <>\n              <Button\n                danger\n                shape=\"circle\"\n                size=\"small\"\n                icon={<CloseOutlined />}\n                onClick={() => handleInvitationOp(id, false)}\n              />{' '}\n              <Button\n                type=\"primary\"\n                shape=\"circle\"\n                size=\"small\"\n                icon={<CheckOutlined />}\n                onClick={() => handleInvitationOp(id, true)}\n              />\n            </>\n          ) : status === NotificationStatusEnum.ACCEPTED ? (\n            <span>Accepted</span>\n          ) : (\n            <span>Declined</span>\n          )}\n        </div>\n      );\n    return null;\n  };\n\n  const processContent = (content: string) => {\n    const index = content.indexOf('[');\n    const match = content.match(/\\[(.*)\\]/);\n\n    return (\n      <>\n        {content.substring(0, index)} <strong>{match![1]}</strong>\n      </>\n    );\n  };\n\n  return (\n    <div className=\"notifications-list\">\n      <List\n        dataSource={data}\n        renderItem={(each) => (\n          <List.Item className=\"notification-item\">\n            <div className=\"info\">\n              {each.type === 'invite' ? (\n                <MailTwoTone className=\"bell\" color=\"#ccc\" />\n              ) : (\n                <BellTwoTone className=\"bell\" color=\"#ccc\" />\n              )}\n              {processContent(each.content)}\n            </div>\n            {renderOperations(each)}\n          </List.Item>\n        )}\n      />\n    </div>\n  );\n}\n","const COLOR_LISTS = [\n  '#f56a00',\n  '#7265e6',\n  '#ffbf00',\n  '#00a2ae',\n  '#00ae0e',\n  '#9c35b1',\n  '#0da887',\n  '#0d77a8'\n];\n\nexport const COLOR_LISTS_LENGTH = COLOR_LISTS.length;\n\nexport const randomColor = (index?: number): string =>\n  COLOR_LISTS[index ? index : Math.floor(Math.random() * COLOR_LISTS.length)];\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RouteChildrenProps } from 'react-router';\nimport { FaComments, FaHashtag, FaBell, FaSignOutAlt } from 'react-icons/fa';\nimport { Avatar, Badge, Modal, Popover, Tooltip } from 'antd';\nimport { ExclamationCircleOutlined, StopOutlined } from '@ant-design/icons';\n\nimport NotificationList from './NotificationList';\nimport { RootState } from '../../store';\nimport {\n  fetchNotifications,\n  fetchRoomList,\n  fetchUserInfo,\n  userLogout\n} from '../../store/actions/user';\nimport { COLOR_LISTS_LENGTH, randomColor } from '../../utils/random';\nimport { NotificationStatusEnum, UserActionType } from '../../@types/enums';\n\nimport './styles.scss';\n\nexport default function Sidebar(props: RouteChildrenProps): JSX.Element {\n  const dispatch = useDispatch();\n  const { user, sidebarTab, notifications, closedWarningPanel } = useSelector(\n    (state: RootState) => state.user\n  );\n\n  const [showNotifications, setShowNotifications] = useState<boolean>(false);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n\n    if (user) {\n      const intervalBody = () => {\n        dispatch(fetchUserInfo());\n        dispatch(fetchNotifications());\n      };\n      intervalBody();\n      timer = setInterval(intervalBody, 3000);\n      dispatch(fetchRoomList('my'));\n    }\n\n    return () => clearInterval(timer);\n  }, []);\n\n  useEffect(() => {\n    if (user) {\n      if (user.hateSpeechCount >= 5 && user.hateSpeechCount < 10 && !closedWarningPanel) {\n        Modal.confirm({\n          title: 'Warning',\n          icon: <ExclamationCircleOutlined />,\n          content: `You have been detected sending hate speech ${user.hateSpeechCount} times. Over 10 times and you will be banned from this app.`,\n          centered: true\n        });\n        dispatch({ type: UserActionType.CLOSE_WARNING_PANEL });\n      } else if (user.hateSpeechCount >= 10 && !closedWarningPanel) {\n        Modal.confirm({\n          title: 'Banned',\n          icon: <StopOutlined />,\n          content:\n            'You have exceeded the maximum of speech count. You will be forced to logout and banned',\n          centered: true,\n          closable: false,\n          cancelText: '',\n          onOk: () => {\n            dispatch({ type: UserActionType.USER_LOGOUT });\n          },\n          onCancel: () => {\n            dispatch({ type: UserActionType.USER_LOGOUT });\n          }\n        });\n        dispatch({ type: UserActionType.CLOSE_WARNING_PANEL });\n      }\n    }\n  }, [user]);\n\n  const handleSwitchTab = (tab: 'my' | 'public') => {\n    dispatch(fetchRoomList(tab));\n  };\n\n  return (\n    <div className=\"sidebar\">\n      <Popover\n        trigger=\"hover\"\n        placement=\"rightTop\"\n        arrowContent\n        content={\n          <div className=\"user-info\">\n            <div>\n              <span>Username:</span> {user?.username}\n            </div>\n            <div>\n              <span>Age:</span> {user?.age}\n            </div>\n            <div>\n              <span>School:</span> {user?.schoolName}\n            </div>\n            <div>\n              <span>Interests:</span> {user?.interests}\n            </div>\n            <hr />\n            <div>\n              <span>HSC:</span> {user?.hateSpeechCount}\n            </div>\n          </div>\n        }\n      >\n        <Avatar\n          size={64}\n          src={user?.imageUrl}\n          style={{ backgroundColor: randomColor(user?.id || 0 % COLOR_LISTS_LENGTH) }}\n        />\n      </Popover>\n      <ul>\n        <li className={`${sidebarTab === 'my' ? 'active' : ''}`}>\n          <Tooltip placement=\"left\" title=\"Chatrooms I Joined\">\n            <Badge>\n              <FaComments size={30} onClick={() => handleSwitchTab('my')} />\n            </Badge>\n          </Tooltip>\n        </li>\n        <li className={`${sidebarTab === 'public' ? 'active' : ''}`}>\n          <Tooltip placement=\"left\" title=\"Other Public Chatrooms\">\n            <Badge>\n              <FaHashtag size={30} onClick={() => handleSwitchTab('public')} />\n            </Badge>\n          </Tooltip>\n        </li>\n        <li className={showNotifications ? 'active' : ''}>\n          <Popover\n            trigger=\"click\"\n            placement=\"right\"\n            title=\"Notifications\"\n            arrowContent\n            content={<NotificationList />}\n            onVisibleChange={setShowNotifications}\n          >\n            <Badge\n              count={\n                notifications.filter(\n                  (each) =>\n                    each.type === 'invite' && each.status === NotificationStatusEnum.NO_STATUS\n                ).length\n              }\n            >\n              <FaBell size={30} />\n            </Badge>\n          </Popover>\n        </li>\n        <li>\n          <Tooltip placement=\"left\" title=\"Log out\">\n            <FaSignOutAlt\n              style={{ transform: 'rotate(180deg)', marginTop: 'auto' }}\n              size={30}\n              onClick={() => {\n                props.history.push('/login');\n                dispatch(userLogout());\n              }}\n            />\n          </Tooltip>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { Alert, Avatar, Divider, Input, Popover } from 'antd';\nimport { COLOR_LISTS_LENGTH, randomColor } from '../utils/random';\nimport { EyeInvisibleOutlined } from '@ant-design/icons';\n\ninterface MessageProps {\n  own: boolean;\n  isAdmin: boolean;\n  message: MessageType;\n  onMessageChange: (id: number, text: string) => void;\n  onMessageDelete: (id: number) => void;\n}\n\nexport default function Message({\n  own,\n  isAdmin,\n  message,\n  onMessageChange,\n  onMessageDelete\n}: MessageProps): JSX.Element {\n  const [isEditing, setIsEditing] = useState<boolean>(false);\n  const [editText, setEditText] = useState<string>('');\n\n  const handleEditOnKeyPress = (e: any) => {\n    if (e.which === 13 && !e.shiftKey && editText) {\n      e.preventDefault();\n      onMessageChange(message.messageId, editText);\n    }\n  };\n\n  const renderPopoverContent = () => {\n    return (\n      <div className=\"message-operation\">\n        <span\n          onClick={() => {\n            setIsEditing(true);\n            setEditText(message.content);\n          }}\n        >\n          Edit\n        </span>\n        <Divider type=\"vertical\" />\n        <span onClick={() => onMessageDelete(message.messageId)}>Remove</span>\n        {isEditing && (\n          <Input\n            value={editText}\n            onChange={(e) => setEditText(e.target.value)}\n            onKeyPress={handleEditOnKeyPress}\n          />\n        )}\n      </div>\n    );\n  };\n\n  if (message.type === 'system') {\n    return (\n      <Alert message={message.content} type=\"warning\" showIcon style={{ marginBottom: '1rem' }} />\n    );\n  }\n\n  if (own) {\n    return (\n      <div className=\"message-item me\" key={message.messageId}>\n        <div className=\"info\">\n          <div className=\"name\">\n            {message.isPrivate && (\n              <span style={{ color: 'rgb(93, 52, 139)' }}>\n                Private to {message.receiver!.userName}\n                <EyeInvisibleOutlined style={{ margin: '0 1rem' }} />\n              </span>\n            )}\n            {message.sender!.userName}\n          </div>\n\n          <Popover\n            content={renderPopoverContent()}\n            trigger=\"click\"\n            onVisibleChange={(visible) => !visible && setIsEditing(false)}\n          >\n            <div className=\"text\">{message.content}</div>\n          </Popover>\n        </div>\n        <Avatar\n          size=\"large\"\n          src={message.sender!.userAvatar}\n          style={{\n            marginTop: '.3rem',\n            backgroundColor: randomColor(message.sender!.userId % COLOR_LISTS_LENGTH)\n          }}\n        >\n          {message.sender!.userName[0]}\n        </Avatar>\n      </div>\n    );\n  }\n  return (\n    <div className=\"message-item\" key={message.messageId}>\n      <Avatar\n        size=\"large\"\n        src={message.sender?.userAvatar}\n        style={{\n          marginTop: '.3rem',\n          backgroundColor: randomColor(message.sender!.userId % COLOR_LISTS_LENGTH)\n        }}\n      >\n        {message.sender?.userName[0]}\n      </Avatar>\n      <div className=\"info\">\n        <div className=\"name\">\n          {message.sender?.userName}\n          {message.isPrivate && (\n            <span style={{ color: 'rgb(93, 52, 139)' }}>\n              <EyeInvisibleOutlined style={{ margin: '0 1rem' }} />\n              Private to ME\n            </span>\n          )}{' '}\n        </div>\n\n        {isAdmin ? (\n          <Popover content={renderPopoverContent()} trigger=\"click\">\n            <div className=\"text\"> {message.content}</div>\n          </Popover>\n        ) : (\n          <div className=\"text\"> {message.content}</div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import { RootState } from '..';\nimport { RoomActionType } from '../../@types/enums';\nimport request from '../../utils/request';\nimport { fetchRoomList } from './user';\n\nexport const fetchRoomInfo = (id: number) => async (dispatch: DispatchType<RoomAction>) => {\n  try {\n    dispatch({ type: RoomActionType.FETCH_ROOM_LOADING });\n    const { data } = await request<GetRoomResponse[]>({\n      method: 'GET',\n      url: `/getChatRoom/${id}`\n    });\n\n    dispatch({ type: RoomActionType.FETCH_ROOM, payload: data![0] });\n  } catch (error) {\n    console.log((error as Error).message);\n  } finally {\n    dispatch({ type: RoomActionType.CANCEL_LOADING });\n  }\n};\n\nexport const fetchRoomUsers = (id: number) => async (dispatch: DispatchType<RoomAction>) => {\n  try {\n    const data1 = await request<RoomUserType[]>({\n      method: 'GET',\n      url: `/getListofUser/${id}`\n    });\n\n    dispatch({ type: RoomActionType.FETCH_NORMAL_USERS, payload: data1.data });\n\n    const data2 = await request<RoomUserType[]>({\n      method: 'GET',\n      url: `/getListofBlockedUser/${id}`\n    });\n\n    dispatch({ type: RoomActionType.FETCH_BLOCKED_USERS, payload: data2.data });\n  } catch (error) {\n    console.log((error as Error).message);\n  } finally {\n    dispatch({ type: RoomActionType.FETCH_USERS_END_LOADING });\n  }\n};\n\nexport const leaveRoom = (id: number) => async (dispatch: DispatchType<RoomAction>) => {\n  try {\n    await request<string, { chatRoomId: number }>({\n      method: 'POST',\n      url: '/leaveChatRoom',\n      body: { chatRoomId: id }\n    });\n    dispatch({ type: RoomActionType.LEAVE_ROOM });\n    await fetchRoomList('my')(dispatch);\n  } catch (error) {\n    console.log((error as Error).message);\n  }\n};\n\nexport const newMessage =\n  (message: MessageType) => (_: DispatchType<RoomAction>, getState: () => RootState) => {\n    const { ws } = getState().user;\n    const { currentRoom } = getState().room;\n\n    const processed: any = {\n      ...message,\n      senderId: message.sender?.userId,\n      receiverId: message.receiver?.userId || -1,\n      roomId: currentRoom?.chatRoomId\n    };\n    ws?.send(JSON.stringify(processed));\n\n    // dispatch({ type: RoomActionType.NEW_MESSAGE, payload: message });\n  };\n\nexport const editMessage = (messageId: number, content: string, chatRoomId: number) => async () => {\n  try {\n    await request<string, { messageId: number; content: string; chatRoomId: number }>({\n      method: 'POST',\n      url: '/editMessage',\n      body: { messageId, content, chatRoomId }\n    });\n  } catch (error) {\n    console.log((error as Error).message);\n  }\n};\n\nexport const removeMessage = (messageId: number, chatRoomId: number) => async () => {\n  try {\n    await request<string, { messageId: number; chatRoomId: number }>({\n      method: 'POST',\n      url: '/removeMessage',\n      body: { messageId, chatRoomId }\n    });\n  } catch (error) {\n    console.log((error as Error).message);\n  }\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CloseCircleFilled, EllipsisOutlined } from '@ant-design/icons';\nimport { Button, Input, message, Spin, Tag } from 'antd';\n\nimport Message from '../../Components/Message';\nimport { RootState } from '../../store';\nimport { editMessage, fetchRoomInfo, newMessage, removeMessage } from '../../store/actions/room';\nimport { RoomActionType } from '../../@types/enums';\n\nimport './styles.scss';\n\ninterface ChatPanelProps {\n  openDrawer: () => void;\n}\n\nexport default function ChatPanel(props: ChatPanelProps): JSX.Element {\n  const dispatch = useDispatch();\n  const { user } = useSelector((state: RootState) => state.user);\n  const {\n    currentRoom,\n    messages,\n    messageLoading,\n    isPrivateMessage,\n    privateMessageTo,\n    isBlocked,\n    isAdmin\n  } = useSelector((state: RootState) => state.room);\n\n  const messagePanelRef = useRef<HTMLDivElement>(null);\n\n  const [inputMessage, setInputMessage] = useState<string>('');\n  const [scroll, setScroll] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (currentRoom) {\n      dispatch(fetchRoomInfo(currentRoom.chatRoomId));\n    }\n  }, [currentRoom]);\n\n  useEffect(() => {\n    if (messagePanelRef?.current && !scroll) {\n      const { current } = messagePanelRef;\n      current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n\n  useEffect(() => {\n    if (scroll) {\n      setTimeout(() => setScroll(false), 2000);\n    }\n  }, [scroll]);\n\n  const handleKeyPress = (e: any) => {\n    if (isBlocked) {\n      message.error('You are blocked');\n      return;\n    }\n\n    if (e.which === 13 && !e.shiftKey && inputMessage) {\n      e.preventDefault();\n      dispatch(\n        newMessage({\n          messageId: Math.random(),\n          content: inputMessage,\n          isPrivate: isPrivateMessage,\n          sender: {\n            userId: user!.id,\n            userName: user!.username,\n            userAvatar: user!.imageUrl\n          },\n          type: 'new',\n          receiver: privateMessageTo\n        })\n      );\n      setInputMessage('');\n    }\n  };\n\n  const handleMessageChange = (id: number, text: string) => {\n    dispatch(editMessage(id, text, currentRoom!.chatRoomId));\n  };\n\n  const handleMessageDelete = (id: number) => {\n    dispatch(removeMessage(id, currentRoom!.chatRoomId));\n  };\n\n  const turnOffPrivateMessage = () => {\n    dispatch({ type: RoomActionType.UNSET_PRIVATE_MESSAGE });\n  };\n\n  if (!currentRoom) {\n    return (\n      <div className=\"placeholder-panel\">\n        <h1>Select a room to start chatting!</h1>\n        <img\n          src=\"https://res.cloudinary.com/rylanzhou/image/upload/v1635557590/COMP%20504/undraw_Anonymous_feedback_re_rc5v_zn7vcm.png\"\n          alt=\"Placeholder\"\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"chat-panel\">\n      <div className=\"header\">\n        <h3>{currentRoom!.chatRoomName}</h3>\n        {currentRoom!.isPrivate ? <Tag color=\"blue\">Private</Tag> : <Tag color=\"green\">Public</Tag>}\n        <Button\n          type=\"link\"\n          icon={<EllipsisOutlined style={{ fontSize: 32 }} />}\n          style={{ marginLeft: 'auto' }}\n          onClick={() => props.openDrawer()}\n        />\n      </div>\n\n      <div className=\"message-panel\" onScroll={() => setScroll(true)}>\n        {messageLoading ? (\n          <Spin\n            style={{\n              position: 'absolute',\n              left: '50%',\n              top: '2rem',\n              transform: 'translateX(-50%)'\n            }}\n          />\n        ) : (\n          <>\n            {messages.map((each) => (\n              <Message\n                key={each.messageId}\n                message={each}\n                isAdmin={isAdmin}\n                own={each.sender?.userId === user?.id}\n                onMessageChange={handleMessageChange}\n                onMessageDelete={handleMessageDelete}\n              />\n            ))}\n          </>\n        )}\n        <div style={{ float: 'left', clear: 'both' }} ref={messagePanelRef}></div>\n      </div>\n\n      <div className=\"operation-panel\">\n        {isPrivateMessage && (\n          <div className=\"private-banner\">\n            <CloseCircleFilled onClick={turnOffPrivateMessage} />\n            Private Message to {privateMessageTo!.userName}\n          </div>\n        )}\n        <Input.TextArea\n          disabled={isBlocked}\n          placeholder={isBlocked ? 'You are blocked' : ''}\n          onKeyPress={handleKeyPress}\n          value={inputMessage}\n          onChange={(e) => setInputMessage(e.target.value)}\n          showCount\n          maxLength={100}\n          rows={isPrivateMessage ? 6 : 7}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Spin } from 'antd';\n\nexport const Loading = (): JSX.Element => {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        width: '100%',\n        height: '100%',\n        zIndex: 100,\n        backgroundColor: 'rgba(255, 255, 255, 0.3)'\n      }}\n    >\n      <Spin\n        style={{\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)'\n        }}\n      />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Avatar, Button, Tag, Modal, Form, Input, InputNumber, Switch, Badge } from 'antd';\nimport { useForm } from 'antd/lib/form/Form';\nimport { ExclamationCircleOutlined, PlusOutlined } from '@ant-design/icons';\n\nimport { Loading } from '../../Components/Loading';\n\nimport { randomColor } from '../../utils/random';\nimport request from '../../utils/request';\nimport { RootState } from '../../store';\nimport { fetchRoomList } from '../../store/actions/user';\nimport { RoomActionType, UserActionType } from '../../@types/enums';\n\nexport function RoomsList(): JSX.Element {\n  const dispatch = useDispatch();\n  const data = useSelector((state: RootState) => state.user.roomList);\n  const roomListLoading = useSelector((state: RootState) => state.user.roomListLoading);\n  const sidebarTab = useSelector((state: RootState) => state.user.sidebarTab);\n  const currentRoom = useSelector((state: RootState) => state.room.currentRoom);\n\n  const [form] = useForm();\n  const [createModalVisible, setCreateModalVisible] = useState<boolean>(false);\n  const [createLoading, setCreateLoading] = useState<boolean>(false);\n\n  const showDeleteConfirm = () => {\n    Modal.confirm({\n      title: 'Are you sure to leave all rooms?',\n      icon: <ExclamationCircleOutlined />,\n      content: 'This operation cannot be undone.',\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      centered: true,\n      async onOk() {\n        try {\n          await request<string>({\n            method: 'POST',\n            url: '/leaveAllChatroom'\n          });\n          dispatch({ type: UserActionType.LEAVE_ALL_ROOMS });\n          dispatch({ type: RoomActionType.LEAVE_ROOM });\n        } catch (error) {\n          console.log((error as Error).message);\n        }\n      },\n      onCancel() {\n        console.log('Cancel');\n      }\n    });\n  };\n\n  const handleSubmitForm = async () => {\n    try {\n      const valid = await form.validateFields();\n\n      if (valid) {\n        setCreateLoading(true);\n\n        await request<string, CreatRoomRequest>({\n          method: 'POST',\n          url: '/createRoom',\n          body: form.getFieldsValue()\n        });\n\n        if (sidebarTab === 'my') {\n          dispatch(fetchRoomList('my'));\n        }\n\n        setCreateModalVisible(false);\n      }\n    } catch (error) {\n      console.log((error as Error).message);\n    } finally {\n      setCreateLoading(false);\n    }\n  };\n\n  const handleClickRoom = async (id: number) => {\n    try {\n      if (sidebarTab === 'public') {\n        // Join room\n        await request<string, { chatRoomId: number }>({\n          method: 'POST',\n          url: '/joinRoom',\n          body: {\n            chatRoomId: id\n          }\n        });\n      }\n\n      dispatch({\n        type: RoomActionType.ACTIVE_ROOM,\n        payload: data.find((each) => each.chatRoomId === id)\n      });\n      dispatch({ type: UserActionType.CLEAR_NEW_MESSAGE, payload: id });\n    } catch (error) {\n      console.log((error as Error).message);\n    }\n  };\n\n  return (\n    <div className=\"rooms-list\">\n      <Button\n        type=\"dashed\"\n        size=\"large\"\n        icon={<PlusOutlined />}\n        style={{ margin: '0 1rem' }}\n        onClick={() => setCreateModalVisible(true)}\n      >\n        Create a Room\n      </Button>\n      <div className=\"list\">\n        {roomListLoading && <Loading />}\n        {data.map((each) => (\n          <Room\n            key={each.chatRoomId}\n            name={each.chatRoomName}\n            id={each.chatRoomId}\n            hasNewMessage={each.hasNewMessage}\n            isActive={currentRoom?.chatRoomId === each.chatRoomId}\n            isPrivate={each.isPrivate}\n            onClick={handleClickRoom}\n          />\n        ))}\n      </div>\n      <Button type=\"primary\" color=\"danger\" danger onClick={showDeleteConfirm}>\n        Leave All Rooms\n      </Button>\n\n      <Modal\n        title=\"Create a Room\"\n        visible={createModalVisible}\n        centered\n        okText=\"Create\"\n        onCancel={() => setCreateModalVisible(false)}\n        destroyOnClose\n        footer={\n          <>\n            <Button onClick={() => setCreateModalVisible(false)}>Cancel</Button>\n            <Button type=\"primary\" onClick={() => handleSubmitForm()} loading={createLoading}>\n              Create\n            </Button>\n          </>\n        }\n      >\n        <Form\n          form={form}\n          requiredMark={false}\n          className=\"form\"\n          labelAlign=\"right\"\n          labelCol={{ span: 6 }}\n          wrapperCol={{ span: 12 }}\n        >\n          <Form.Item\n            name=\"roomName\"\n            label=\"Name\"\n            rules={[{ required: true, message: 'This field cannot be empty' }]}\n          >\n            <Input placeholder=\"Room Name\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"roomSize\"\n            label=\"Size\"\n            initialValue={10}\n            rules={[\n              { required: true, message: 'This field cannot be empty' },\n              {\n                validator(_, value) {\n                  if (value !== null && (+value < 2 || +value > 70)) {\n                    return Promise.reject(new Error('Invalid size'));\n                  }\n                  return Promise.resolve();\n                }\n              }\n            ]}\n          >\n            <InputNumber min={2} max={70} />\n          </Form.Item>\n\n          <Form.Item\n            name=\"isPrivate\"\n            label=\"Is Private\"\n            valuePropName=\"checked\"\n            initialValue={true}\n          >\n            <Switch />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n}\n\ninterface RoomProps {\n  id: number;\n  name: string;\n  hasNewMessage: boolean;\n  isActive: boolean;\n  isPrivate: boolean;\n  onClick: (id: number) => void;\n}\n\nexport function Room(props: RoomProps): JSX.Element {\n  return (\n    <div\n      className={`room ${props.isActive && 'active'}`}\n      onClick={() => !props.isActive && props.onClick(props.id)}\n    >\n      <Badge dot={props.hasNewMessage}>\n        <Avatar size={48} shape=\"square\" style={{ backgroundColor: randomColor(props.id % 8) }}>\n          {props.name\n            .split(' ')\n            .map((each) => each[0])\n            .join('')\n            .slice(0, 2)}\n        </Avatar>\n      </Badge>\n      <div className=\"info\">\n        <span className=\"name\">{props.name}</span>\n        <br />\n        {props.isPrivate ? <Tag color=\"blue\">Private</Tag> : <Tag color=\"green\">Public</Tag>}\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Avatar, Drawer, Button, Dropdown, Menu, Modal, Popconfirm, message, Tag } from 'antd';\nimport { ExclamationCircleFilled, MoreOutlined, PlusOutlined } from '@ant-design/icons';\n\nimport { RootState } from '../../store';\nimport { COLOR_LISTS_LENGTH, randomColor } from '../../utils/random';\nimport { RoomActionType } from '../../@types/enums';\nimport { Loading } from '../../Components/Loading';\n\nimport './styles.scss';\nimport request from '../../utils/request';\nimport { fetchRoomUsers, leaveRoom } from '../../store/actions/room';\n\ninterface RoomDrawerProps {\n  visible: boolean;\n  onClose: () => void;\n}\n\nmessage.config({\n  top: 180,\n  duration: 2\n});\n\nexport default function RoomDrawer(props: RoomDrawerProps): JSX.Element {\n  const dispatch = useDispatch();\n  const user = useSelector((state: RootState) => state.user.user);\n  const { currentRoom, blockedUsers, normalUsers, isAdmin, fetchUsersLoading } = useSelector(\n    (state: RootState) => state.room\n  );\n\n  const [otherUsers, setOtherUsers] = useState<RoomUserType[]>([]);\n\n  const [memberModalVisible, setMemberModalVisible] = useState<boolean>(false);\n  const [inviteListLoading, setInviteListLoading] = useState<boolean>(false);\n\n  const blockOrUnblockUser = async (userId: number, toBlock: boolean) => {\n    try {\n      dispatch({ type: RoomActionType.FETCH_USERS_LOADING });\n      await request<string, { user: number; chatRoomId: number }>({\n        method: 'POST',\n        url: toBlock ? '/blockUser' : '/unblockUser',\n        body: {\n          user: userId,\n          chatRoomId: currentRoom!.chatRoomId\n        }\n      });\n      message.success('Operation succeeded');\n      dispatch(fetchRoomUsers(currentRoom!.chatRoomId));\n    } catch (error) {\n      console.log((error as Error).message);\n    }\n  };\n\n  const removeUser = async (userId: number) => {\n    try {\n      await request<string, { user: number; chatRoomId: number }>({\n        method: 'POST',\n        url: '/removeUser',\n        body: {\n          user: userId,\n          chatRoomId: currentRoom!.chatRoomId\n        }\n      });\n      message.success('Operation succeeded');\n      dispatch(fetchRoomUsers(currentRoom!.chatRoomId));\n    } catch (error) {\n      console.log((error as Error).message);\n    }\n  };\n\n  const renderMenu = (isBlocked: boolean, user: RoomUserType) => {\n    return (\n      <Menu key={user.userId}>\n        {!isBlocked && (\n          <Menu.Item\n            key={1}\n            onClick={() => {\n              dispatch({ type: RoomActionType.SET_PRIVATE_MESSAGE, payload: user });\n              props.onClose();\n            }}\n          >\n            Private Message\n          </Menu.Item>\n        )}\n        {isAdmin && (\n          <>\n            {!isBlocked ? (\n              <Menu.Item key={2} onClick={() => blockOrUnblockUser(user.userId, true)}>\n                Block\n              </Menu.Item>\n            ) : (\n              <Menu.Item key={3} onClick={() => blockOrUnblockUser(user.userId, false)}>\n                Unblock\n              </Menu.Item>\n            )}\n            <Menu.Item key={4} onClick={() => removeUser(user.userId)}>\n              Remove from room\n            </Menu.Item>\n          </>\n        )}\n      </Menu>\n    );\n  };\n\n  const showDeleteConfirm = () => {\n    Modal.confirm({\n      title: 'Are you sure to leave this room?',\n      icon: <ExclamationCircleFilled />,\n      content: 'This operation cannot be undone.',\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      centered: true,\n      onOk() {\n        props.onClose();\n        dispatch(leaveRoom(currentRoom!.chatRoomId));\n      },\n      onCancel() {\n        console.log('Cancel');\n      }\n    });\n  };\n\n  const handleOpenInviteModal = async () => {\n    setMemberModalVisible(true);\n    setInviteListLoading(true);\n\n    try {\n      const { data } = await request<RoomUserType[]>({\n        method: 'GET',\n        url: `/getListofUserToInvite/${currentRoom!.chatRoomId}`\n      });\n      setOtherUsers(data || []);\n    } catch (error) {\n      console.log((error as Error).message);\n    } finally {\n      setInviteListLoading(false);\n    }\n  };\n\n  return (\n    <Drawer\n      className=\"room-drawer\"\n      placement=\"right\"\n      getContainer={false}\n      visible={props.visible}\n      onClose={props.onClose}\n      closable={false}\n      style={{ position: 'absolute' }}\n    >\n      <div style={{ position: 'relative' }}>\n        {fetchUsersLoading && <Loading />}\n        <section>\n          <h3>Room Members</h3>\n          {normalUsers.map((each) => (\n            <div key={each.userId} className=\"user\">\n              <Avatar\n                src={each.userAvatar}\n                style={{ backgroundColor: randomColor(each.userId % COLOR_LISTS_LENGTH) }}\n              >\n                {each.userName[0]}\n              </Avatar>\n              <span className=\"name\">{each.userName}</span>\n\n              {each.userId === user!.id ? (\n                <Tag color=\"blue\" style={{ marginLeft: 'auto' }}>\n                  You\n                </Tag>\n              ) : (\n                <Dropdown overlay={renderMenu(false, each)} placement=\"bottomLeft\">\n                  <Button type=\"link\" icon={<MoreOutlined />} style={{ marginLeft: 'auto' }} />\n                </Dropdown>\n              )}\n            </div>\n          ))}\n\n          {isAdmin && currentRoom!.isPrivate && (\n            <div style={{ textAlign: 'center' }}>\n              <Button type=\"dashed\" icon={<PlusOutlined />} onClick={() => handleOpenInviteModal()}>\n                Invite Member\n              </Button>\n            </div>\n          )}\n        </section>\n\n        <section style={{ marginTop: '2rem' }}>\n          <h3>Blocked List</h3>\n          {blockedUsers.map((each) => (\n            <div key={each.userId} className=\"user\">\n              <Avatar\n                src={each.userAvatar}\n                style={{ backgroundColor: randomColor(each.userId % COLOR_LISTS_LENGTH) }}\n              >\n                {each.userName[0]}\n              </Avatar>\n              <span className=\"name\">{each.userName}</span>\n\n              {each.userId === user!.id ? (\n                <Tag color=\"blue\" style={{ marginLeft: 'auto' }}>\n                  You\n                </Tag>\n              ) : (\n                <Dropdown overlay={renderMenu(true, each)} placement=\"bottomLeft\">\n                  <Button type=\"link\" icon={<MoreOutlined />} style={{ marginLeft: 'auto' }} />\n                </Dropdown>\n              )}\n            </div>\n          ))}\n        </section>\n      </div>\n\n      <div style={{ marginTop: '2rem', textAlign: 'center' }}>\n        <Button type=\"primary\" danger onClick={showDeleteConfirm}>\n          Leave Room\n        </Button>\n      </div>\n\n      <Modal\n        visible={memberModalVisible}\n        onCancel={() => setMemberModalVisible(false)}\n        closable\n        title=\"Invite Members\"\n        centered\n        footer={null}\n        width={300}\n      >\n        <div className=\"member-modal\">\n          {inviteListLoading && <Loading />}\n          {otherUsers.map((each) => (\n            <div key={each.userId} className=\"user\">\n              <Avatar\n                src={each.userAvatar}\n                style={{ backgroundColor: randomColor(each.userId % COLOR_LISTS_LENGTH) }}\n              >\n                {each.userName[0]}\n              </Avatar>\n              <span className=\"name\">{each.userName}</span>\n              <Popconfirm\n                title=\"Confirm to send invitation\"\n                onConfirm={async () => {\n                  try {\n                    await request<string, { user: number; chatRoomId: number }>({\n                      method: 'POST',\n                      url: '/sendInvite',\n                      body: {\n                        user: each.userId,\n                        chatRoomId: currentRoom!.chatRoomId\n                      }\n                    });\n                    message.success('Invitation Sent');\n                  } catch (error) {\n                    console.log((error as Error).message);\n                  }\n                }}\n                okText=\"Invite\"\n                cancelText=\"Cancel\"\n              >\n                <Button\n                  type=\"primary\"\n                  size=\"small\"\n                  style={{ marginLeft: 'auto' }}\n                  icon={<PlusOutlined />}\n                >\n                  Invite\n                </Button>\n              </Popconfirm>\n            </div>\n          ))}\n        </div>\n      </Modal>\n    </Drawer>\n  );\n}\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect, RouteChildrenProps } from 'react-router';\nimport { Spin } from 'antd';\n\nimport Layout from '../../Components/Layout';\nimport Sidebar from './Sidebar';\nimport ChatPanel from './ChatPanel';\nimport { RoomsList } from './RoomsList';\nimport RoomDrawer from './RoomDrawer';\nimport { RootState } from '../../store';\nimport { fetchRoomUsers } from '../../store/actions/room';\n\nimport './styles.scss';\n\nexport default function Main(props: RouteChildrenProps): JSX.Element {\n  const dispatch = useDispatch();\n  const { isAuthenticated, user } = useSelector((state: RootState) => state.user);\n  const { currentRoom } = useSelector((state: RootState) => state.room);\n  const [drawerVisible, setDrawerVisible] = useState<boolean>(false);\n\n  if (!isAuthenticated) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  if (!user) {\n    return (\n      <Layout>\n        <Spin\n          size=\"large\"\n          style={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)'\n          }}\n        />\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"main\">\n        <Sidebar {...props} />\n        <RoomsList />\n        <ChatPanel\n          openDrawer={() => {\n            dispatch(fetchRoomUsers(currentRoom!.chatRoomId));\n            setDrawerVisible(true);\n          }}\n        />\n\n        <RoomDrawer visible={drawerVisible} onClose={() => setDrawerVisible(false)} />\n      </div>\n    </Layout>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { FaUserAlt, FaLock, FaSchool } from 'react-icons/fa';\nimport { RouteChildrenProps } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Input, Form, Button, Steps, Space, Avatar, Popover } from 'antd';\nimport {\n  AppstoreOutlined,\n  ArrowLeftOutlined,\n  ArrowRightOutlined,\n  SmileOutlined,\n  UserOutlined\n} from '@ant-design/icons';\nimport { useForm } from 'antd/lib/form/Form';\n\nimport Layout from '../../Components/Layout';\nimport { RootState } from '../../store';\nimport { userRegister } from '../../store/actions/user';\n\nimport './styles.scss';\n\nconst AVATARS = [\n  'jed',\n  'joe',\n  'jack',\n  'jess',\n  'jodi',\n  'jacques',\n  'jordan',\n  'josephine',\n  'jude',\n  'jon',\n  'jazabelle',\n  'julie',\n  'jean',\n  'jabala',\n  'jaqueline',\n  'jenni',\n  'jeri',\n  'jia',\n  'jai',\n  'jolee',\n  'jane',\n  'josh',\n  'jana',\n  'jeane',\n  'jerry',\n  'jake',\n  'james',\n  'jocelyn'\n];\n\nexport default function Register(props: RouteChildrenProps): JSX.Element {\n  const dispatch = useDispatch();\n  const { isAuthenticated, isLoading } = useSelector((state: RootState) => state.user);\n  const [form] = useForm();\n\n  const [form1, setForm1] = useState({});\n  const [step, setStep] = useState<number>(0);\n  const [selectedAvatar, setSelectedAvatar] = useState<string>('');\n  const [avatarSelectVisible, setAvatarSelectVisible] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      props.history.push('/main');\n    }\n  }, [isAuthenticated]);\n\n  const handleMoveStep = async (incre: number) => {\n    const result = await form.validateFields();\n    if (incre === 1) {\n      setForm1(form.getFieldsValue());\n    }\n    if (result) {\n      setStep(step + incre);\n    }\n  };\n\n  const handleSubmit = async () => {\n    const result = await form.validateFields();\n    if (result) {\n      const formValues = form.getFieldsValue();\n      formValues.age = +formValues.age;\n      dispatch(userRegister(Object.assign({}, formValues, form1)));\n    }\n  };\n\n  const renderStep1 = () => (\n    <>\n      <Form.Item\n        name=\"username\"\n        rules={[{ required: true, message: 'This field cannot be empty' }]}\n      >\n        <Input placeholder=\"Username\" size=\"large\" prefix={<FaUserAlt />} />\n      </Form.Item>\n\n      <Form.Item\n        name=\"password\"\n        rules={[{ required: true, message: 'This field cannot be empty' }]}\n      >\n        <Input type=\"password\" placeholder=\"Password\" size=\"large\" prefix={<FaLock />} />\n      </Form.Item>\n\n      <Form.Item\n        name=\"confirm\"\n        rules={[\n          { required: true, message: 'This field cannot be empty' },\n          ({ getFieldValue }) => ({\n            validator(_, value) {\n              if (!value || getFieldValue('password') === value) {\n                return Promise.resolve();\n              }\n              return Promise.reject(new Error('The two passwords that you entered do not match!'));\n            }\n          })\n        ]}\n      >\n        <Input type=\"password\" placeholder=\"Confirm\" size=\"large\" prefix={<FaLock />} />\n      </Form.Item>\n\n      <div style={{ marginTop: '3rem' }}>\n        <Button\n          type=\"primary\"\n          shape=\"round\"\n          size=\"large\"\n          icon={<ArrowRightOutlined style={{ marginRight: '1rem' }} />}\n          style={{ width: '8rem', height: '3rem' }}\n          onClick={() => handleMoveStep(1)}\n        >\n          Next\n        </Button>\n        <Button type=\"link\" size=\"large\" onClick={() => props.history.push('/login')}>\n          Login\n        </Button>\n      </div>\n    </>\n  );\n\n  const renderStep2 = () => (\n    <>\n      <Form.Item\n        name=\"imageUrl\"\n        rules={[\n          { required: true, message: 'This field cannot be empty' },\n          { type: 'url', message: 'Invalid Url' }\n        ]}\n      >\n        <>\n          <Input type=\"hidden\" />\n\n          <Popover\n            placement=\"bottomRight\"\n            visible={avatarSelectVisible}\n            content={\n              <>\n                {AVATARS.map((each) => (\n                  <span\n                    key={each}\n                    onClick={() => {\n                      form.setFieldsValue({ imageUrl: `https://joeschmoe.io/api/v1/${each}` });\n                      setSelectedAvatar(`https://joeschmoe.io/api/v1/${each}`);\n                      setAvatarSelectVisible(false);\n                    }}\n                  >\n                    <Avatar src={`https://joeschmoe.io/api/v1/${each}`} />\n                  </span>\n                ))}\n              </>\n            }\n          >\n            <div style={{ display: 'inline-block' }} onClick={() => setAvatarSelectVisible(true)}>\n              <Avatar className=\"avatar\" size={60} src={selectedAvatar} icon={<UserOutlined />} />\n            </div>\n          </Popover>\n        </>\n        {/* <Select placeholder=\"Select your avatar\" size=\"large\">\n          {AVATARS.map((each) => (\n            <Select.Option key={each} value={`https://joeschmoe.io/api/v1/${each}`}>\n              <Avatar src={`https://joeschmoe.io/api/v1/${each}`} />\n            </Select.Option>\n          ))}\n        </Select> */}\n        {/* <Input type=\"url\" placeholder=\"Avatar Url\" size=\"large\" prefix={<PictureOutlined />} /> */}\n      </Form.Item>\n\n      <Form.Item\n        name=\"age\"\n        rules={[\n          { required: true, message: 'This field cannot be empty' },\n          {\n            validator(_, value) {\n              if (+value < 10 || +value > 70) {\n                return Promise.reject(new Error('Invalid age'));\n              }\n              return Promise.resolve();\n            }\n          }\n        ]}\n      >\n        <Input\n          type=\"number\"\n          max={70}\n          min={10}\n          placeholder=\"Age\"\n          size=\"large\"\n          prefix={<SmileOutlined />}\n        />\n      </Form.Item>\n\n      <Form.Item\n        name=\"interests\"\n        rules={[{ required: true, message: 'This field cannot be empty' }]}\n      >\n        <Input placeholder=\"Interests\" size=\"large\" prefix={<AppstoreOutlined />} />\n      </Form.Item>\n\n      <Form.Item name=\"school\" rules={[{ required: true, message: 'This field cannot be empty' }]}>\n        <Input placeholder=\"School Name\" size=\"large\" prefix={<FaSchool />} />\n      </Form.Item>\n\n      <Space style={{ marginTop: '3rem' }}>\n        <Button\n          type=\"ghost\"\n          shape=\"round\"\n          size=\"large\"\n          style={{ width: '8rem', height: '3rem' }}\n          icon={<ArrowLeftOutlined style={{ marginRight: '1rem' }} />}\n          onClick={() => handleMoveStep(-1)}\n        >\n          Back\n        </Button>\n        <Button\n          type=\"primary\"\n          shape=\"round\"\n          size=\"large\"\n          style={{ minWidth: '8rem', height: '3rem' }}\n          onClick={() => handleSubmit()}\n          loading={isLoading}\n        >\n          Register\n        </Button>\n      </Space>\n    </>\n  );\n\n  const steps = [renderStep1(), renderStep2()];\n\n  return (\n    <Layout>\n      <div className=\"register\">\n        <div className=\"left\">\n          <h1>Register</h1>\n\n          <Steps direction=\"vertical\" current={step}>\n            <Steps.Step title=\"Create Username and Password\" />\n            <Steps.Step title=\"Choose Avatar and enter info\" />\n          </Steps>\n\n          <Form form={form} key={0} requiredMark={false} className=\"form\">\n            {steps[step]}\n          </Form>\n        </div>\n        <div className=\"right\"></div>\n      </div>\n    </Layout>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { HashRouter as Router, Route, Redirect } from 'react-router-dom';\n\nimport Login from './Pages/Login';\nimport Main from './Pages/Main';\nimport Register from './Pages/Register';\nimport { RootState } from './store';\nimport { fetchUserInfo } from './store/actions/user';\n\nfunction App(): JSX.Element {\n  const dispatch = useDispatch();\n\n  const user = useSelector((state: RootState) => state.user.user);\n  const isAuthenticated = useSelector((state: RootState) => state.user.isAuthenticated);\n\n  const token = useSelector((state: RootState) => state.user.token);\n\n  useEffect(() => {\n    if (token && !user) {\n      dispatch(fetchUserInfo(token));\n    }\n  }, []);\n\n  return (\n    <Router hashType=\"slash\">\n      <Route path=\"/*\">\n        {isAuthenticated ? <Redirect to=\"/main\" /> : <Redirect to=\"/login\" />}\n      </Route>\n      <Route path=\"/login\" exact component={Login} />\n      <Route path=\"/register\" exact component={Register} />\n      <Route path=\"/main\" exact component={Main} />\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\n\nimport './index.less';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}